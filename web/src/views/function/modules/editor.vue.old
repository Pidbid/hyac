<template>
  <div :style="{ height: `${height}px`, width: '100%' }" ref="editorContainer"></div>
</template>

<script setup lang="ts">
import { ref, onMounted, onBeforeUnmount, watch } from 'vue';
import * as monaco from 'monaco-editor';

// VSCode API & 扩展服务
import { initialize } from '@codingame/monaco-vscode-api';

// @ts-ignore
import getLanguagesServiceOverride from '@codingame/monaco-vscode-languages-service-override';
// @ts-ignore
import getThemeServiceOverride from '@codingame/monaco-vscode-theme-service-override';
// @ts-ignore
import getTextMateServiceOverride from '@codingame/monaco-vscode-textmate-service-override';
// @ts-ignore
import '@codingame/monaco-vscode-python-default-extension';
// @ts-ignore
import '@codingame/monaco-vscode-theme-defaults-default-extension';

// LSP 相关
import { MonacoLanguageClient } from 'monaco-languageclient';
import { toSocket, WebSocketMessageReader, WebSocketMessageWriter } from 'vscode-ws-jsonrpc';
import ReconnectingWebSocket from 'reconnecting-websocket';

interface Props {
  modelValue: string;
  height?: number;
  language?: string;
  fontSize?: number;
  tabSize: number;
  minimap: boolean;
}

const props = withDefaults(defineProps<Props>(), {
  language: 'python',
  height: 400,
  fontSize: 16,
  tabSize: 4,
  minimap: true,
});
const emit = defineEmits(['update:modelValue']);

const editorContainer = ref<HTMLDivElement | null>(null);
let editor: monaco.editor.IStandaloneCodeEditor | null = null;
let languageClient: MonacoLanguageClient | null = null;
let socket: any = null;

const isSettingValue = ref(false);

// worker 配置
self.MonacoEnvironment = {
  getWorker: function (workerId, label) {
    if (label === 'json') {
      return new Worker(new URL('monaco-editor/esm/vs/language/json/json.worker', import.meta.url));
    }
    return new Worker(new URL('monaco-editor/esm/vs/editor/editor.worker', import.meta.url));
  }
};

async function setupMonaco() {
  await initialize({
    ...getTextMateServiceOverride(),
    ...getThemeServiceOverride(),
    ...getLanguagesServiceOverride(),
  });

  if (editorContainer.value) {
    editor = monaco.editor.create(editorContainer.value, {
      value: props.modelValue,
      language: props.language,
      theme: 'Default Dark Modern',
      automaticLayout: true,
      fontSize: props.fontSize,
      tabSize: props.tabSize,
      minimap: { enabled: props.minimap },
      fontFamily: 'Courier New, monospace',
    });

    // v-model 双向绑定
    editor.onDidChangeModelContent(() => {
      if (isSettingValue.value) return; // 避免 setValue 时触发 emit
      const value = editor!.getValue();
      emit('update:modelValue', value);
    });
  }

  // 连接 LSP WebSocket（仅在 python 语言时启用）
  if (props.language === 'python') {
    socket = new ReconnectingWebSocket('ws://lsp.hyacos.top');
    socket.onopen = () => {
      const socketAdapter = toSocket(socket!);
      const reader = new WebSocketMessageReader(socketAdapter);
      const writer = new WebSocketMessageWriter(socketAdapter);
      languageClient = new MonacoLanguageClient({
        name: 'Python Language Client',
        clientOptions: {
          documentSelector: ['python'],
          errorHandler: {
            error: () => ({ action: 1 }), // Continue
            closed: () => ({ action: 2 }) // DoNotRestart
          },
        },
        messageTransports: { reader, writer },
      });
      languageClient.start();
      reader.onClose(() => languageClient?.stop());
    };
  }
}

onMounted(() => {
  setupMonaco();
});

onBeforeUnmount(() => {
  if (editor) {
    editor.dispose();
  }
  if (languageClient) {
    languageClient.stop();
  }
  if (socket) {
    socket.close();
  }
});

// 外部 modelValue 变化时同步到编辑器
watch(
  () => props.modelValue,
  (newVal) => {
    if (editor && editor.getValue() !== newVal) {
      // 记录当前光标
      const selection = editor.getSelection();
      isSettingValue.value = true;
      editor.setValue(newVal);
      // 恢复光标
      if (selection) {
        editor.setSelection(selection);
      }
      isSettingValue.value = false;
    }
  }
);
</script>
