<script setup lang="ts">
import { ref, shallowRef, onMounted, onBeforeUnmount, watch } from 'vue';
import { VueMonacoEditor, loader } from '@guolao/vue-monaco-editor';
import * as monaco from 'monaco-editor';
import { initialize } from '@codingame/monaco-vscode-api';
// @ts-ignore
import getLanguagesServiceOverride from '@codingame/monaco-vscode-languages-service-override';
// @ts-ignore
import getThemeServiceOverride from '@codingame/monaco-vscode-theme-service-override';
// @ts-ignore
import getTextMateServiceOverride from '@codingame/monaco-vscode-textmate-service-override';


// LSP 相关
import { MonacoLanguageClient } from 'monaco-languageclient';
import { CloseAction, ErrorAction } from 'vscode-languageclient/browser';
import { toSocket, WebSocketMessageReader, WebSocketMessageWriter } from 'vscode-ws-jsonrpc';
import ReconnectingWebSocket from 'reconnecting-websocket';

// 在 Vite 环境下，如果从 node_modules 加载 monaco-editor，需要特殊处理 worker
import editorWorker from 'monaco-editor/esm/vs/editor/editor.worker?worker';
import jsonWorker from 'monaco-editor/esm/vs/language/json/json.worker?worker';
import cssWorker from 'monaco-editor/esm/vs/language/css/css.worker?worker';
import htmlWorker from 'monaco-editor/esm/vs/language/html/html.worker?worker';
import tsWorker from 'monaco-editor/esm/vs/language/typescript/ts.worker?worker';

self.MonacoEnvironment = {
  getWorker(_, label) {
    if (label === 'json') {
      return new jsonWorker();
    }
    if (label === 'css' || label === 'scss' || label === 'less') {
      return new cssWorker();
    }
    if (label === 'html' || label === 'handlebars' || label === 'razor') {
      return new htmlWorker();
    }
    if (label === 'typescript' || label === 'javascript') {
      return new tsWorker();
    }
    return new editorWorker();
  }
};

// 配置 loader 从 node_modules 加载 monaco
loader.config({ monaco });

interface Props {
  modelValue: string;
  language?: string;
  fontSize?: number;
  tabSize?: number;
  minimap: boolean;
  theme: 'vs' | 'vs-dark';
}

const props = withDefaults(defineProps<Props>(), {
  language: 'python',
  fontSize: 16,
  tabSize: 4,
  minimap: true,
  theme: 'vs-dark'
});

const emit = defineEmits(['update:modelValue']);

const editorValue = ref(props.modelValue);
const editorRef = shallowRef<monaco.editor.IStandaloneCodeEditor>();
const isInitialized = ref(false);
const isSettingValue = ref(false);

let languageClient: MonacoLanguageClient | null = null;
let socket: ReconnectingWebSocket | null = null;
const lspStatus = ref<'disconnected' | 'connecting' | 'connected' | 'error'>('disconnected');

const editorOptions = ref({
  automaticLayout: true,
  formatOnType: true,
  formatOnPaste: true,
  fontSize: props.fontSize,
  tabSize: props.tabSize,
  minimap: {
    enabled: props.minimap
  }
});

const handleMount = (editor: monaco.editor.IStandaloneCodeEditor) => {
  editorRef.value = editor;
  connectToLsp('ws://localhost:8765');
};

async function initMonaco() {
  await initialize({
    ...getTextMateServiceOverride(),
    ...getThemeServiceOverride(),
    ...getLanguagesServiceOverride()
  });
  isInitialized.value = true;
}

function connectToLsp(url: string) {
  if (props.language !== 'python' || !url) return;

  if (socket) {
    socket.close();
  }

  lspStatus.value = 'connecting';
  socket = new ReconnectingWebSocket(url);

  socket.onopen = () => {
    lspStatus.value = 'connected';
    const socketAdapter = toSocket(socket! as any);
    const reader = new WebSocketMessageReader(socketAdapter);
    const writer = new WebSocketMessageWriter(socketAdapter);
    languageClient = new MonacoLanguageClient({
      name: 'Python Language Client',
      clientOptions: {
        documentSelector: ['python'],
        errorHandler: {
          error: () => ({ action: ErrorAction.Continue }),
          closed: () => ({ action: CloseAction.DoNotRestart })
        }
      },
      messageTransports: { reader, writer }
    });
    languageClient.start();
    reader.onClose(() => {
      languageClient?.stop().catch(() => {});
      lspStatus.value = 'disconnected';
    });
  };

  socket.onerror = () => {
    lspStatus.value = 'error';
    socket?.close();
  };

  socket.onclose = () => {
    lspStatus.value = 'disconnected';
    languageClient?.stop().catch(() => {});
  };
}

watch(
  () => props.modelValue,
  newVal => {
    if (editorRef.value && editorRef.value.getValue() !== newVal) {
      const selection = editorRef.value.getSelection();
      isSettingValue.value = true;
      // Use the editor's setValue method directly for better control
      editorRef.value.setValue(newVal);
      if (selection) {
        editorRef.value.setSelection(selection);
      }
      // Sync back to the local ref
      editorValue.value = newVal;
      isSettingValue.value = false;
    }
  }
);

watch(editorValue, newValue => {
  // Prevent emitting update when the change comes from the prop
  if (!isSettingValue.value) {
    emit('update:modelValue', newValue);
  }
});

watch(
  () => props.fontSize,
  newSize => {
    editorRef.value?.updateOptions({ fontSize: newSize });
  }
);

watch(
  () => props.tabSize,
  newTabSize => {
    editorRef.value?.updateOptions({ tabSize: newTabSize });
  }
);

watch(
  () => props.minimap,
  enabled => {
    editorRef.value?.updateOptions({ minimap: { enabled } });
  }
);

onMounted(async () => {
  await initMonaco();
});

onBeforeUnmount(() => {
  if (languageClient && languageClient.isRunning()) {
    languageClient.stop().catch(() => {});
  }
  if (socket) {
    socket.close();
  }
  editorRef.value?.dispose();
});
</script>

<template>
  <div class="h-full w-full">
    <VueMonacoEditor
      v-if="isInitialized"
      v-model:value="editorValue"
      :language="props.language"
      :theme="props.theme"
      :options="editorOptions"
      @mount="handleMount"
    />
    <div v-else class="flex h-full w-full items-center justify-center">
      <span>Initializing Editor Services...</span>
    </div>
  </div>
</template>
